/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef student_TYPES_H
#define student_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _SharedStruct__isset {
  _SharedStruct__isset() : num(false), name(false) {}
  bool num;
  bool name;
} _SharedStruct__isset;

class SharedStruct {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  SharedStruct() : num(0), name("") {
  }

  virtual ~SharedStruct() throw() {}

  int32_t num;
  std::string name;

  _SharedStruct__isset __isset;

  void __set_num(const int32_t val) {
    num = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const SharedStruct & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SharedStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
